#!/usr/bin/env node


var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');

// 여러개를 실행시키기 위한 cluster
const cluster = require('cluster');
const totalCPU = require('os').cpus().length;
// console.log(cluster);

if (cluster.isMaster) {
  //프로세스 생성 및 관리
  console.log(`Master ${process.pid} is running`);
  cluster.fork();
  //프로세서 생성 반복문, cpu의 최대 개수만큼 생성기능
  // for (let i = 0; i < totalCPU; i++) {
  //   cluster.fork(); //프로세서 생성
  // }

  // cluster.on('exit', (Worker, code, signal) => {
  //   console.log(`worker $${Worker.process.pid} died`);

  //   cluster.fork();
  // })

}

else {
  console.log(`Worker ${cluster.worker.process.pid}`);


  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  var server = http.createServer(app);

  //socket.io등록하기
  app.io.attach(server);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);


  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
